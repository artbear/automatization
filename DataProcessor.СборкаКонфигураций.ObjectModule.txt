// https://github.com/progromaking/BranchConf

Перем мДеревоКонфигурацииТаблица;
Перем мДеревоКонфигурацииDOM;

Процедура ВыполнитьСборкуКонфигурации() Экспорт
	
	Инициализировать();
	
	ЗаполнитьДеревоКонфигурации();
	
	ДополнитьФайлОписанияКонфигурации();
	
	СоздатьФайлыСборки();
	
	УдалитьРеквизитыВЗаглушках();
	
	СоздатьПодсистемы();
	
КонецПроцедуры

Процедура Инициализировать()
	
	мДеревоКонфигурацииТаблица = Новый ТаблицаЗначений;
	мДеревоКонфигурацииТаблица.Колонки.Добавить("ИмяОбъектаКонфигурации", Новый ОписаниеТипов("Строка"));
	мДеревоКонфигурацииТаблица.Колонки.Добавить("ЭтоЗаглушка", Новый ОписаниеТипов("Булево"));
	
	Файл = Новый Файл(КаталогСборки);
	КаталогСборки = Файл.ПолноеИмя + ПолучитьРазделительПути();
	
	ЧтениеXML=Новый ЧтениеXML(); 
	ЧтениеXML.ОткрытьФайл(ПутьККопииФайла(КаталогИсходныхФайлов + "Configuration.xml"),Новый ПараметрыЧтенияXML(,,,ТипПроверкиXML.НетПроверки));
	ПостроительDOM = Новый ПостроительDOM;
	мДеревоКонфигурацииDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	НайденныйУзел = мДеревоКонфигурацииDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
	Пока НайденныйУзел.ЕстьДочерниеУзлы() Цикл
		НайденныйУзел.УдалитьДочерний(НайденныйУзел.ПервыйДочерний);
	КонецЦикла;
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(КаталогСборки + "Configuration.xml");
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(мДеревоКонфигурацииDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();	
КонецПроцедуры
Функция ПутьККопииФайла(ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	НовыйПутьКФайлу = КаталогВременныхФайлов() + Файл.Имя;
	
	КопироватьФайл(ПутьКФайлу, НовыйПутьКФайлу);
	
	Возврат НовыйПутьКФайлу;
КонецФункции

Процедура ЗаполнитьДеревоКонфигурации()
	ЗаполнитьДеревоКонфигурации_ОсновныеОбъектыСборки();
	ЗаполнитьДеревоКонфигурации_Заглушки_xml();
	ЗаполнитьДеревоКонфигурации_Заглушки_Form();
КонецПроцедуры
Процедура ЗаполнитьДеревоКонфигурации_ОсновныеОбъектыСборки()
	СписокЗагружаемыхОбъектов = Новый ТабличныйДокумент;
	СписокЗагружаемыхОбъектов.Прочитать(ПутьККопииФайла(ФайлОписанияКонфигурации));
	
	Для сч = 2 по СписокЗагружаемыхОбъектов.ВысотаТаблицы Цикл
		ТипОбъекта = СписокЗагружаемыхОбъектов.Область(сч, 1).Текст;
		ВидОбъекта = СписокЗагружаемыхОбъектов.Область(сч, 2).Текст;
		Если ПустаяСтрока(ТипОбъекта) или ПустаяСтрока(ВидОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = мДеревоКонфигурацииТаблица.Добавить();
		НоваяСтрока.ИмяОбъектаКонфигурации = ТипОбъекта + "." + ВидОбъекта;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоКонфигурации_Заглушки_xml()
	мОбъекты = ПолучитьУпомянутыеОбъекты_xml(КаталогСборки + "Configuration.xml");
	Для каждого ИмяОбъекта из мОбъекты Цикл
		Если НЕ мДеревоКонфигурацииТаблица.Найти(ИмяОбъекта, "ИмяОбъектаКонфигурации") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = мДеревоКонфигурацииТаблица.Добавить();
		НоваяСтрока.ИмяОбъектаКонфигурации = ИмяОбъекта;
		НоваяСтрока.ЭтоЗаглушка = Истина;
	КонецЦикла;
	
	Отбор = Новый Структура("ЭтоЗаглушка", Ложь);
	мНайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	
	Для Каждого Строка из мНайденныеСтроки Цикл
		мНайденныеФайлы = НайтиФайлы(КаталогИсходныхФайлов, Строка.ИмяОбъектаКонфигурации+"*.xml");
		Для каждого НайденныйФайл из мНайденныеФайлы Цикл
			мОбъекты = ПолучитьУпомянутыеОбъекты_xml(НайденныйФайл.ПолноеИмя);
			Для каждого ИмяОбъекта из мОбъекты Цикл
				Если НЕ мДеревоКонфигурацииТаблица.Найти(ИмяОбъекта, "ИмяОбъектаКонфигурации") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = мДеревоКонфигурацииТаблица.Добавить();
				НоваяСтрока.ИмяОбъектаКонфигурации = ИмяОбъекта;
				НоваяСтрока.ЭтоЗаглушка = Истина;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
Функция ПолучитьУпомянутыеОбъекты_xml(ПутьКФайлу)
	Состояние("Поиск связанных объектов для " + ПутьКФайлу);
	мУпомянутыеОбъекты = Новый Массив;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	//Текст = ТекстовыйДокумент.ПолучитьТекст();
	
	мШаблоныПоиска = Новый Массив;
	мШаблоныПоиска.Добавить("Interface");
	мШаблоныПоиска.Добавить("Style");
	мШаблоныПоиска.Добавить("Language");
	мШаблоныПоиска.Добавить("CommonForm");
	мШаблоныПоиска.Добавить("Catalog");
	мШаблоныПоиска.Добавить("AccumulationRegister");
	мШаблоныПоиска.Добавить("InformationRegister");
	мШаблоныПоиска.Добавить("AccountingRegister");
	мШаблоныПоиска.Добавить("ChartOfAccounts");
	мШаблоныПоиска.Добавить("ChartOfCharacteristicTypes");
	мШаблоныПоиска.Добавить("Role");
	мШаблоныПоиска.Добавить("Task");
	мШаблоныПоиска.Добавить("SessionParameter");
	мШаблоныПоиска.Добавить("SettingsStorage");
	мШаблоныПоиска.Добавить("Document");
	мШаблоныПоиска.Добавить("CommonPicture");
	мШаблоныПоиска.Добавить("Report");
	мШаблоныПоиска.Добавить("Enum");
	мШаблоныПоиска.Добавить("CommandGroup");
	мШаблоныПоиска.Добавить("StyleItem");
	мШаблоныПоиска.Добавить("DataProcessor");
	мШаблоныПоиска.Добавить("BusinessProcess");

	ИсходныйТекст = ТекстовыйДокумент.ПолучитьТекст();
	Для каждого ШаблонПоиска из мШаблоныПоиска Цикл
		Текст = ИсходныйТекст;
		Подстрока = ">" + ШаблонПоиска + ".";
		ПозицияВСтроке = Найти(Текст, Подстрока);
		Пока ПозицияВСтроке Цикл
			Текст = Сред(Текст, ПозицияВСтроке + 1);
			УпомянутыйОбъект = Лев(Текст, Найти(Текст, "<")-1);
			Если СтрЧислоВхождений(УпомянутыйОбъект, ".") = 1 Тогда
				мУпомянутыеОбъекты.Добавить(УпомянутыйОбъект);
			ИначеЕсли СтрЧислоВхождений(УпомянутыйОбъект, ".") > 1 Тогда
				УпомянутыйОбъект = СтрЗаменить(УпомянутыйОбъект, ".", Символы.ПС);
				мУпомянутыеОбъекты.Добавить(
						СтрПолучитьСтроку(УпомянутыйОбъект, 1)
						+"."
						+СтрПолучитьСтроку(УпомянутыйОбъект, 2));
			КонецЕсли;
			
			ПозицияВСтроке = Найти(Текст, Подстрока);
		КонецЦикла;
		
	КонецЦикла;
	
	
	Текст = ИсходныйТекст;
	Текст = СтрЗаменить(Текст, "d4p1:", "cfg:");
	Текст = СтрЗаменить(Текст, "cfg:Characteristic.", "cfg:ChartOfCharacteristicTypes.");
	Текст = СтрЗаменить(Текст, "cfg:InformationRegisterRecordManager.", "cfg:InformationRegister.");
	Текст = СтрЗаменить(Текст, "cfg:DocumentRef<", "<");
	Текст = СтрЗаменить(Текст, "cfg:CatalogRef<", "<");
	Текст = СтрЗаменить(Текст, "cfg:DynamicList<", "<");
	Текст = СтрЗаменить(Текст, "cfg:Filter<", "<");
	Текст = СтрЗаменить(Текст, "cfg:ReportBuilder<", "<");
	Текст = СтрЗаменить(Текст, "cfg:AnyRef<", "<");
	Подстрока = ">cfg:";
	ПозицияВСтроке = Найти(Текст, Подстрока);
	Пока ПозицияВСтроке Цикл
		Текст = Сред(Текст, ПозицияВСтроке + 1);
		ИмяОбъекта = Лев(Текст, Найти(Текст, "<")-1);
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "cfg:", "");
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "Ref.", ".");
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "Object.", ".");
		мУпомянутыеОбъекты.Добавить(ИмяОбъекта);
		
		ПозицияВСтроке = Найти(Текст, Подстрока);
	КонецЦикла;
	
	Текст = ИсходныйТекст;
	Подстрока = "<xr:Value name=""";
	ПозицияВСтроке = Найти(Текст, Подстрока);
	Пока ПозицияВСтроке Цикл
		Текст = Сред(Текст, ПозицияВСтроке + СтрДлина(Подстрока));
		ИмяОбъекта = Лев(Текст, Найти(Текст, """>")-1);
		мУпомянутыеОбъекты.Добавить(ИмяОбъекта);
		
		ПозицияВСтроке = Найти(Текст, Подстрока);
	КонецЦикла;
	
	
	Возврат мУпомянутыеОбъекты;
КонецФункции

Процедура ЗаполнитьДеревоКонфигурации_Заглушки_Form()
	
	ТаблицаГуидовОбъектовКонфигурации = ПолучитьГуидыОбъектовКонфигурации();
	
	Отбор = Новый Структура("ЭтоЗаглушка", Ложь);
	мНайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	
	Для Каждого Строка из мНайденныеСтроки Цикл
		мНайденныеФайлы = НайтиФайлы(КаталогИсходныхФайлов, Строка.ИмяОбъектаКонфигурации+"*.Form");
		Для каждого НайденныйФайл из мНайденныеФайлы Цикл
			мОбъекты = ПолучитьУпомянутыеОбъекты_Form(НайденныйФайл.ПолноеИмя, ТаблицаГуидовОбъектовКонфигурации);
			Для каждого ИмяОбъекта из мОбъекты Цикл
				Если НЕ мДеревоКонфигурацииТаблица.Найти(ИмяОбъекта, "ИмяОбъектаКонфигурации") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = мДеревоКонфигурацииТаблица.Добавить();
				НоваяСтрока.ИмяОбъектаКонфигурации = ИмяОбъекта;
				НоваяСтрока.ЭтоЗаглушка = Истина;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьГуидыОбъектовКонфигурации()
	ТаблицаГуидов = Новый ТаблицаЗначений;
	ТаблицаГуидов.Колонки.Добавить("Гуид");
	ТаблицаГуидов.Колонки.Добавить("ИмяОбъектаКонфигурации");
	
	ЧтениеXML=Новый ЧтениеXML(); 
	ЧтениеXML.ОткрытьФайл(ПутьККопииФайла(КаталогИсходныхФайлов + "Configuration.xml"),Новый ПараметрыЧтенияXML(,,,ТипПроверкиXML.НетПроверки));
	ПостроительDOM = Новый ПостроительDOM;
	ОбъектDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УзлыОбъектов = ОбъектDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0].ДочерниеУзлы;
	
	ОбъектыКонфигурации = Новый Массив;
	Для каждого Узел из УзлыОбъектов Цикл
		
		ИмяОбъектаКонфигурации = Узел.ИмяЭлемента + "." + Узел.ТекстовоеСодержимое;
		ОбъектыКонфигурации.Добавить(ИмяОбъектаКонфигурации);
		
	КонецЦикла;
	
	мОбъектыСГуидами = Новый Массив;
	мОбъектыСГуидами.Добавить("CommonPicture");
	мОбъектыСГуидами.Добавить("StyleItem");
	
	СчетчикДляВыводаСостояния = 0;
	Для каждого ИмяОбъектаКонфигурации из ОбъектыКонфигурации Цикл
		СчетчикДляВыводаСостояния = СчетчикДляВыводаСостояния+1;
		Если СчетчикДляВыводаСостояния%50 = 0 Тогда
			Состояние("Построение таблицы гуидов: " + СчетчикДляВыводаСостояния + "/" + ОбъектыКонфигурации.Количество());
		КонецЕсли;
		ИмяФайла = КаталогИсходныхФайлов + ИмяОбъектаКонфигурации + ".xml";
		ЧтениеXML=Новый ЧтениеXML(); 
		ЧтениеXML.ОткрытьФайл(ИмяФайла,Новый ПараметрыЧтенияXML(,,,ТипПроверкиXML.НетПроверки));
		ПостроительDOM = Новый ПостроительDOM;
		ОбъектDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		НайденныеУзлы = ОбъектDOM.ПолучитьЭлементыПоИмени("TypeId");
		Для каждого УзелТипа из НайденныеУзлы Цикл
			Гуид = УзелТипа.ТекстовоеСодержимое;
			Если НЕ ЗначениеЗаполнено(Гуид) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаГуидов.Добавить();
			НоваяСтрока.Гуид = Гуид;
			НоваяСтрока.ИмяОбъектаКонфигурации = ИмяОбъектаКонфигурации;
		КонецЦикла;
		
		Для каждого Шаблон из мОбъектыСГуидами Цикл
			НайденныеУзлы = ОбъектDOM.ПолучитьЭлементыПоИмени(Шаблон);
			Для каждого УзелТипа из НайденныеУзлы Цикл
				Гуид = УзелТипа.ПолучитьАтрибут("uuid");
				Если НЕ ЗначениеЗаполнено(Гуид) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ТаблицаГуидов.Добавить();
				НоваяСтрока.Гуид = Гуид;
				НоваяСтрока.ИмяОбъектаКонфигурации = ИмяОбъектаКонфигурации;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаГуидов.Индексы.Добавить("Гуид");
	Возврат ТаблицаГуидов;
	
КонецФункции
Функция ПолучитьУпомянутыеОбъекты_Form(ПутьКФайлу, ТаблицаГуидовОбъектов)
	Состояние("Поиск связанных объектов для " + ПутьКФайлу);
	мУпомянутыеОбъекты = Новый Массив;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	ИсходныйТекст = ТекстовыйДокумент.ПолучитьТекст();
	
	Текст = ИсходныйТекст;
	Текст = СтрЗаменить(Текст, ",", Символы.ПС);
	Текст = СтрЗаменить(Текст, "{", Символы.ПС);
	Текст = СтрЗаменить(Текст, "}", Символы.ПС);
	//Для сч = 1 по СтрЧислоСтрок(Текст) Цикл
	//	ГуидОбъекта = СтрПолучитьСтроку(Текст, сч);
	//	Если НЕ СтрДлина(ГуидОбъекта) = 36 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Отбор = Новый Структура("Гуид", ГуидОбъекта);
	//	НайденныеСтроки = ТаблицаГуидовОбъектов.НайтиСтроки(Отбор);
	//	Для каждого Строка из НайденныеСтроки Цикл
	//		мУпомянутыеОбъекты.Добавить(Строка.ИмяОбъектаКонфигурации);
	//	КонецЦикла;
	//КонецЦикла;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Global = Истина;
	RegExp.MultiLine = Истина;
	
	RegExp.Pattern = "^\S{36}$";
	Matches = RegExp.Execute(Текст);
	
	Для Счетчик = 0 По Matches.Count - 1 Цикл 
		ГуидОбъекта = Matches.Item(Счетчик).Value;
		
		Отбор = Новый Структура("Гуид", ГуидОбъекта);
		НайденныеСтроки = ТаблицаГуидовОбъектов.НайтиСтроки(Отбор);
		Для каждого Строка из НайденныеСтроки Цикл
			мУпомянутыеОбъекты.Добавить(Строка.ИмяОбъектаКонфигурации);
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат мУпомянутыеОбъекты;
КонецФункции

Процедура ДополнитьФайлОписанияКонфигурации()
	Если Ложь Тогда
		мДеревоКонфигурацииDOM = Новый ДокументDOM;
	КонецЕсли;
	Отбор = Новый Структура("ЭтоЗаглушка", Ложь);
	мНайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	
	КорневойУзелОбъектов = мДеревоКонфигурацииDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
	
	Для каждого Строка из мНайденныеСтроки Цикл
		стр = СтрЗаменить(Строка.ИмяОбъектаКонфигурации, ".", Символы.ПС);
		
		ИмяЭлемента = СтрПолучитьСтроку(стр, 1);
		НовыйУзел = мДеревоКонфигурацииDOM.СоздатьЭлемент(ИмяЭлемента);
		НовыйУзел.ТекстовоеСодержимое = СтрПолучитьСтроку(стр, 2);
		
		КорневойУзелОбъектов.ДобавитьДочерний(НовыйУзел);
	КонецЦикла;
	
	Отбор = Новый Структура("ЭтоЗаглушка", Истина);
	мНайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	
	НовыйУзел = мДеревоКонфигурацииDOM.СоздатьКомментарий("ЗАГЛУШКИ");
	КорневойУзелОбъектов = мДеревоКонфигурацииDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
	КорневойУзелОбъектов.ДобавитьДочерний(НовыйУзел);
	
	Для каждого Строка из мНайденныеСтроки Цикл
		стр = СтрЗаменить(Строка.ИмяОбъектаКонфигурации, ".", Символы.ПС);
		
		ИмяЭлемента = СтрПолучитьСтроку(стр, 1);
		НовыйУзел = мДеревоКонфигурацииDOM.СоздатьЭлемент(ИмяЭлемента);
		НовыйУзел.ТекстовоеСодержимое = СтрПолучитьСтроку(стр, 2);
		
		КорневойУзелОбъектов.ДобавитьДочерний(НовыйУзел);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьФайлыСборки()
	УдалитьФайлы(КаталогСборки, "*");
	
	Для каждого Строка из мДеревоКонфигурацииТаблица Цикл
		
		Маска = ?(Строка.ЭтоЗаглушка, "*.xml", ".*");
		
		мФайлы = НайтиФайлы(КаталогИсходныхФайлов, Строка.ИмяОбъектаКонфигурации+Маска);
		Для каждого Файл из мФайлы Цикл
			Если НЕ Строка.ЭтоЗаглушка Тогда
			ИначеЕсли Найти(Файл.Имя, ".Style.xml") Тогда
				Продолжить;
			ИначеЕсли Найти(Файл.Имя, ".Help.xml") Тогда
				Продолжить;
			ИначеЕсли Найти(Файл.Имя, ".Form.xml") Тогда
				Продолжить;
			ИначеЕсли Найти(Файл.Имя, ".Picture.xml") Тогда
				Продолжить;
			ИначеЕсли Найти(Файл.Имя, ".Template.") Тогда
				Продолжить;
			КонецЕсли;
			ИмяФайлаПриемника = КаталогСборки + Файл.Имя;
			КопироватьФайл(Файл.ПолноеИмя, ИмяФайлаПриемника);
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(КаталогСборки + "Configuration.xml");
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(мДеревоКонфигурацииDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();	
КонецПроцедуры

Процедура УдалитьРеквизитыВЗаглушках()
	
	ШаблоныУдаления = Новый Массив;
	ШаблоныУдаления.Добавить("Template");
	ШаблоныУдаления.Добавить("v8:Type");
	ШаблоныУдаления.Добавить("Page");
	ШаблоныУдаления.Добавить("Group");	
	
	ШаблоныОчистки = Новый Массив();
	ШаблоныОчистки.Добавить("Type");
	ШаблоныОчистки.Добавить("DefaultObjectForm");
	ШаблоныОчистки.Добавить("DefaultFolderForm");
	ШаблоныОчистки.Добавить("DefaultListForm");
	ШаблоныОчистки.Добавить("DefaultChoiceForm");
	ШаблоныОчистки.Добавить("DefaultFolderChoiceForm");
	ШаблоныОчистки.Добавить("AuxiliaryObjectForm");
	ШаблоныОчистки.Добавить("AuxiliaryFolderForm");
	ШаблоныОчистки.Добавить("AuxiliaryListForm");
	ШаблоныОчистки.Добавить("AuxiliaryChoiceForm");
	ШаблоныОчистки.Добавить("AuxiliaryFolderChoiceForm");
	ШаблоныОчистки.Добавить("ChoiceForm");
	ШаблоныОчистки.Добавить("InputByString");
	ШаблоныОчистки.Добавить("BasedOn");
	ШаблоныОчистки.Добавить("RegisterRecords");
	ШаблоныОчистки.Добавить("CharacteristicExtValues");
	ШаблоныОчистки.Добавить("ExtDimensionTypes");
	ШаблоныОчистки.Добавить("Owners");
	ШаблоныОчистки.Добавить("DefaultSaveForm");
	ШаблоныОчистки.Добавить("DefaultLoadForm");	
	ШаблоныОчистки.Добавить("DefaultForm");	
	ШаблоныОчистки.Добавить("MainDataCompositionSchema");	
	ШаблоныОчистки.Добавить("DefaultSettingsForm");	
	ШаблоныОчистки.Добавить("AuxiliaryForm");	
	ШаблоныОчистки.Добавить("DefaultVariantForm");	
	ШаблоныОчистки.Добавить("ChoiceParameters");	
	ШаблоныОчистки.Добавить("FillValue");	
	ШаблоныОчистки.Добавить("Numerator");	
	ШаблоныОчистки.Добавить("DefaultRecordForm");	
	ШаблоныОчистки.Добавить("AuxiliaryRecordForm");	
	ШаблоныОчистки.Добавить("Addressing");	
	ШаблоныОчистки.Добавить("AddressingDimension");	
	ШаблоныОчистки.Добавить("CurrentPerformer");	
	
	Отбор = Новый Структура("ЭтоЗаглушка", Истина);
	мНайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	
	Для каждого Строка из мНайденныеСтроки Цикл
		
		Если Найти(Строка.ИмяОбъектаКонфигурации, "Enum.") = 1 Тогда
			Продолжить;
		ИначеЕсли Найти(Строка.ИмяОбъектаКонфигурации, "StyleItem.") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеФайлы = НайтиФайлы(КаталогСборки, Строка.ИмяОбъектаКонфигурации + ".xml");
		ДополнительныйМассивФайлов = НайтиФайлы(КаталогСборки, Строка.ИмяОбъектаКонфигурации + ".*.xml");
		Для каждого Файл из ДополнительныйМассивФайлов Цикл
			НайденныеФайлы.Добавить(Файл);
		КонецЦикла;
		
		Если НайденныеФайлы.Количество() = 0 Тогда
			Сообщить("Не найден файл: " + Строка.ИмяОбъектаКонфигурации + ".xml");
			Продолжить;
		КонецЕсли;
		
		Для каждого ФайлОбъекта из НайденныеФайлы Цикл
			ИмяФайлаОбъекта = ФайлОбъекта.ПолноеИмя;
			
			
			ЧтениеXML=Новый ЧтениеXML(); 
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОбъекта,Новый ПараметрыЧтенияXML(,,,ТипПроверкиXML.НетПроверки));
			ПостроительDOM = Новый ПостроительDOM;
			ОбъектDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			Для каждого Шаблон из ШаблоныУдаления Цикл
				мНайденныеУзлы = ОбъектDOM.ПолучитьЭлементыПоИмени(Шаблон);
				Для сч = -мНайденныеУзлы.Количество() по -1 Цикл
					НайденныйУзел = мНайденныеУзлы[-сч-1];
					РодительскийУзел = НайденныйУзел.РодительскийУзел;
					РодительскийУзел.УдалитьДочерний(НайденныйУзел);
				КонецЦикла;
			КонецЦикла;
			
			Для каждого Шаблон из ШаблоныОчистки Цикл
				мНайденныеУзлы = ОбъектDOM.ПолучитьЭлементыПоИмени(Шаблон);
				Для сч = -мНайденныеУзлы.Количество() по -1 Цикл
					НайденныйУзел = мНайденныеУзлы[-сч-1];
					
					Если НЕ мДеревоКонфигурацииТаблица.Найти(НайденныйУзел.ТекстовоеСодержимое, "ИмяОбъектаКонфигурации") = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					//Пока НайденныйУзел.ЕстьДочерниеУзлы() Цикл
					//	НайденныйУзел.УдалитьДочерний(НайденныйУзел.ПервыйДочерний);
					//КонецЦикла;
					КоличествоУзлов = НайденныйУзел.ДочерниеУзлы.Количество();
					Для счУдаляемыеУзлы = -КоличествоУзлов по -1 Цикл
						УдаляемыйУзел = НайденныйУзел.ДочерниеУзлы[-счУдаляемыеУзлы-1];
						Если НайденныйУзел.ИмяЭлемента = "Owners" 
								И НЕ мДеревоКонфигурацииТаблица.Найти(УдаляемыйУзел.ТекстовоеСодержимое, "ИмяОбъектаКонфигурации") = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						НайденныйУзел.УдалитьДочерний(УдаляемыйУзел);
					КонецЦикла;
					Если ПустаяСтрока(НайденныйУзел.Префикс) И НЕ НайденныйУзел.ЕстьДочерниеУзлы() Тогда
						НовыйУзел = НайденныйУзел.КлонироватьУзел(Ложь);
						РодительскийУзел = НайденныйУзел.РодительскийУзел;
						РодительскийУзел.ЗаменитьДочерний(НовыйУзел, НайденныйУзел);
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.ОткрытьФайл(ИмяФайлаОбъекта);
			ЗаписьDOM = Новый ЗаписьDOM();
			ЗаписьDOM.Записать(ОбъектDOM, ЗаписьXML);
			ЗаписьXML.Закрыть();	
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПодсистемы()
	
	ИмяПодсистемы = "ПереносимыеОбъекты";
	Отбор = Новый Структура("ЭтоЗаглушка", Ложь);
	НайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	СоздатьФайлПодсистемы(ИмяПодсистемы, НайденныеСтроки);
	ДобавитьПодсистемуВРеестр(ИмяПодсистемы);
	
	ИмяПодсистемы = "Заглушки";
	Отбор = Новый Структура("ЭтоЗаглушка", Истина);
	НайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	СоздатьФайлПодсистемы(ИмяПодсистемы, НайденныеСтроки);
	ДобавитьПодсистемуВРеестр(ИмяПодсистемы);
	
КонецПроцедуры
Процедура СоздатьФайлПодсистемы(ИмяПодсистемы, СтрокиДереваКонфигурации)
	Макет = ПолучитьМакет("ШаблонПодсистемы");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	ПостроительDOM = Новый ПостроительDOM;
	
	ОбъектDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ОбъектDOM.ПолучитьЭлементыПоИмени("Subsystem")[0].УстановитьАтрибут("uuid", Строка(Новый УникальныйИдентификатор()));
	ОбъектDOM.ПолучитьЭлементыПоИмени("Name")[0].ТекстовоеСодержимое = ИмяПодсистемы;
	
	РодительскийУзел = ОбъектDOM.ПолучитьЭлементыПоИмени("Content")[0];
	Узел_Состав = РодительскийУзел.ДочерниеУзлы[0];
	//Отбор = Новый Структура("ЭтоЗаглушка", Ложь);
	//мНайденныеСтроки = мДеревоКонфигурацииТаблица.НайтиСтроки(Отбор);
	Для каждого Строка из СтрокиДереваКонфигурации Цикл
		НовыйУзел = Узел_Состав.КлонироватьУзел(Истина);
		РодительскийУзел.ВставитьПеред(НовыйУзел, Узел_Состав);
		НовыйУзел.ТекстовоеСодержимое = Строка.ИмяОбъектаКонфигурации;
	КонецЦикла;
	
	РодительскийУзел.УдалитьДочерний(Узел_Состав);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(КаталогСборки + "Subsystem."+ИмяПодсистемы+".xml");
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(ОбъектDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();	
КонецПроцедуры
Процедура ДобавитьПодсистемуВРеестр(ИмяПодсистемы)
	ИмяЭлемента = "Subsystem";
	НовыйУзел = мДеревоКонфигурацииDOM.СоздатьЭлемент(ИмяЭлемента);
	НовыйУзел.ТекстовоеСодержимое = ИмяПодсистемы;
	КорневойУзелОбъектов = мДеревоКонфигурацииDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
	КорневойУзелОбъектов.ДобавитьДочерний(НовыйУзел);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(КаталогСборки + "Configuration.xml");
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(мДеревоКонфигурацииDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры
